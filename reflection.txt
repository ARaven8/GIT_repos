Навіщо Git у сучасних проєктах?

Git є дуже важливим у сучасних проєктах, оскільки він дозволяє правильно контролювати версії коду, 
дозволяє командам ефективно працювати над одним проєктом, не заважаючи один одному, ізберігає повну історію змін з можливістю повернення до будь-якої попередньої версії.

Мій особистий досвід після виконання завдання.

Виконання цього проєкту значно покращило мої навички роботи з Git та поглибило мої знання про Git. Коли я вперше почув про Git та його команди, мені це здавалося трохи складним.
Але виконання практичної роботи змінило уявлення про Git, він став більш зрозумілим для мене. Я зрозумів, що створення гілок та їх об'єднання (merge) дуже корисне, оскільки 
кожен розробник створює свою окрему гілку для роботи над новою функцією чи виправленням, а окремі гілки ізолюють їхні зміни від основного, стабільного коду; після закінчення роботи
над функцією можна їх безпечно з'єднати. Також не менш корисним є налаштування SSH-ключів, що забезпечує безпечну автентифікацію без необхідності постійного введення паролів. 
Створивши структурований репозиторію з README та .gitignore, я навчився виконувати проєкти з професійним та організованим підходом.

Що саме виявилось найзручнішим / найважчим?

Найзручнішим виявилася робота з гілками. Створення ізольованих гілок є фундаментально простим, швидким та дуже зручним, оскільки дозволяє розробникам працювати над новими функціями, не ламаючи основну робочу версію коду.
Найскладнішим для мене є переписування історії комітів. Іноді треба змінити або видалити якийсь коміт, а команди, що змінюють вже існуючу історію, хоч і є потужними, все ж таки є досить складними для розуміння.

Як це застосувати у курсовому або колективному проєкті?

Застосування Git у курсовому або колективному проєкті є критично важливим для організації роботи, уникнення втрати даних і забезпечення ефективної співпраці. кожен член команди 
може працювати у своїй гілці над окремою функцією, а після завершення інтегрувати зміни через pull request або merge. Це дозволяє уникати конфлікти, забезпечує ефективність процесу 
розробки та дозволяє організовано розподілити роботу між учасниками. Навички роботи з Git є дуже важливими для будь-якої професійної розробки у сфері програмування.
